/* The following code was generated by JFlex 1.6.1 */

package codigo;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/eclipse2/Nueva carpeta/ExamenFinalLP3/src/codigo/lenguaje.lex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\31\1\45\1\45\1\31\22\0\1\30\1\10\1\44"+
    "\5\0\1\11\1\11\1\5\1\5\1\11\1\5\1\4\1\5\1\3"+
    "\11\2\1\0\1\11\1\6\1\7\1\6\2\0\32\1\1\11\1\0"+
    "\1\11\1\0\1\1\1\0\1\35\1\21\1\12\1\34\1\13\1\24"+
    "\1\26\1\27\1\25\1\1\1\37\1\23\1\22\1\14\1\17\1\20"+
    "\1\1\1\16\1\32\1\15\1\36\1\42\1\33\1\43\1\40\1\41"+
    "\1\11\1\0\1\11\7\0\1\45\u1fa2\0\1\45\1\45\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\1\6\13\2\1\7\1\10\6\2\1\1\2\0\33\2"+
    "\1\11\6\2\1\12\5\2\1\0\1\13\1\14\3\2"+
    "\1\15\7\2\1\16\4\2\1\17\15\2\1\20\2\2"+
    "\1\21\23\2\1\22\1\2\1\23\1\2\1\24\1\25"+
    "\1\26\5\2\1\27\1\2\1\30\10\2\1\31\1\32"+
    "\16\2\1\33\3\2\1\34\2\2\1\35\1\36\1\37"+
    "\5\2\1\40\7\2\1\41\1\2\1\42\1\43\5\2"+
    "\1\44\1\2\1\45\4\2\1\46\4\2\1\47\5\2"+
    "\1\50\4\2\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\2\1\62\7\2\1\63\1\2"+
    "\1\64\3\2\1\65\1\66\2\2\1\67\1\70\1\2"+
    "\1\71\1\2\1\72\1\73\1\74\1\2\1\75\1\76"+
    "\1\77\1\100\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\46\0\46\0\276"+
    "\0\276\0\46\0\344\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2"+
    "\0\u01c8\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2"+
    "\0\u02f8\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\230"+
    "\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c"+
    "\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c"+
    "\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c"+
    "\0\u0792\0\u07b8\0\u07de\0\114\0\u0804\0\u082a\0\u0850\0\u0876"+
    "\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6"+
    "\0\u03b6\0\46\0\u03dc\0\u09cc\0\u09f2\0\u0a18\0\114\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\114\0\u0b48"+
    "\0\u0b6e\0\u0b94\0\u0bba\0\114\0\u0be0\0\u0c06\0\u0c2c\0\u0c52"+
    "\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82"+
    "\0\u0da8\0\114\0\u0dce\0\u0df4\0\114\0\u0e1a\0\u0e40\0\u0e66"+
    "\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\u0f70\0\u0f96"+
    "\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6"+
    "\0\114\0\u10ec\0\114\0\u1112\0\114\0\114\0\114\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\114\0\u11f6\0\114\0\u121c"+
    "\0\u1242\0\u1268\0\u128e\0\u12b4\0\u12da\0\u1300\0\u1326\0\114"+
    "\0\114\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430"+
    "\0\u1456\0\u147c\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\114"+
    "\0\u1560\0\u1586\0\u15ac\0\114\0\u15d2\0\u15f8\0\u161e\0\114"+
    "\0\114\0\u1644\0\u166a\0\u1690\0\u16b6\0\u16dc\0\114\0\u1702"+
    "\0\u1728\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6\0\114\0\u180c"+
    "\0\114\0\114\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\114"+
    "\0\u18f0\0\114\0\u1916\0\u193c\0\u1962\0\u1988\0\114\0\u19ae"+
    "\0\u19d4\0\u19fa\0\u1a20\0\114\0\u1a46\0\u1a6c\0\u1a92\0\u1ab8"+
    "\0\u1ade\0\114\0\u1b04\0\u1b2a\0\u1b50\0\u1b76\0\114\0\114"+
    "\0\114\0\114\0\114\0\114\0\114\0\114\0\114\0\u1b9c"+
    "\0\114\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6"+
    "\0\114\0\u1ccc\0\114\0\u1cf2\0\u1d18\0\u1d3e\0\114\0\114"+
    "\0\u1d64\0\u1d8a\0\114\0\114\0\u1db0\0\114\0\u1dd6\0\114"+
    "\0\114\0\114\0\u1dfc\0\114\0\114\0\114\0\114\0\114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\23\1\24\1\25\2\3\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\3\3\1\35\1\3"+
    "\1\36\50\0\3\3\6\0\16\3\2\0\12\3\4\0"+
    "\2\4\1\37\43\0\2\40\1\37\50\0\1\12\37\0"+
    "\3\3\6\0\5\3\1\41\3\3\1\42\1\3\1\43"+
    "\1\3\1\44\2\0\3\3\1\45\6\3\3\0\3\3"+
    "\6\0\2\3\1\46\6\3\1\47\4\3\2\0\11\3"+
    "\1\50\3\0\3\3\6\0\1\3\1\51\14\3\2\0"+
    "\3\3\1\52\1\53\5\3\3\0\3\3\6\0\1\3"+
    "\1\54\2\3\1\55\10\3\1\56\2\0\6\3\1\57"+
    "\3\3\3\0\3\3\6\0\1\3\1\60\14\3\2\0"+
    "\12\3\3\0\3\3\6\0\6\3\1\61\7\3\2\0"+
    "\12\3\3\0\3\3\6\0\4\3\1\62\11\3\2\0"+
    "\4\3\1\63\5\3\3\0\3\3\6\0\4\3\1\64"+
    "\1\65\10\3\2\0\12\3\3\0\3\3\6\0\5\3"+
    "\1\66\10\3\2\0\12\3\3\0\3\3\6\0\4\3"+
    "\1\67\1\70\3\3\1\71\4\3\2\0\3\3\1\72"+
    "\6\3\3\0\3\3\6\0\2\3\1\73\7\3\1\74"+
    "\3\3\2\0\12\3\32\0\1\26\1\27\44\0\2\27"+
    "\15\0\3\3\6\0\3\3\1\75\7\3\1\76\1\3"+
    "\1\77\2\0\1\3\1\100\10\3\3\0\3\3\6\0"+
    "\15\3\1\101\2\0\12\3\3\0\3\3\6\0\1\3"+
    "\1\102\3\3\1\103\10\3\2\0\12\3\3\0\3\3"+
    "\6\0\16\3\2\0\4\3\1\104\5\3\3\0\3\3"+
    "\6\0\2\3\1\105\13\3\2\0\1\106\11\3\3\0"+
    "\3\3\6\0\5\3\1\107\5\3\1\110\2\3\2\0"+
    "\12\3\2\0\44\111\1\112\1\111\2\0\2\113\43\0"+
    "\3\3\6\0\2\3\1\114\13\3\2\0\4\3\1\115"+
    "\5\3\3\0\3\3\6\0\16\3\2\0\3\3\1\116"+
    "\6\3\3\0\3\3\6\0\2\3\1\117\13\3\2\0"+
    "\12\3\3\0\3\3\6\0\16\3\2\0\3\3\1\120"+
    "\6\3\3\0\3\3\6\0\3\3\1\121\12\3\2\0"+
    "\1\122\11\3\3\0\3\3\6\0\16\3\2\0\2\3"+
    "\1\123\7\3\3\0\3\3\6\0\16\3\2\0\1\124"+
    "\11\3\3\0\3\3\6\0\3\3\1\125\2\3\1\126"+
    "\7\3\2\0\12\3\3\0\3\3\6\0\16\3\2\0"+
    "\1\3\1\127\10\3\3\0\3\3\6\0\10\3\1\130"+
    "\5\3\2\0\12\3\3\0\3\3\6\0\11\3\1\131"+
    "\4\3\2\0\12\3\3\0\3\3\6\0\10\3\1\132"+
    "\5\3\2\0\12\3\3\0\3\3\6\0\16\3\2\0"+
    "\4\3\1\133\1\3\1\134\3\3\3\0\3\3\6\0"+
    "\4\3\1\135\6\3\1\136\2\3\2\0\12\3\3\0"+
    "\3\3\6\0\6\3\1\137\7\3\2\0\12\3\3\0"+
    "\3\3\6\0\3\3\1\140\10\3\1\141\1\3\2\0"+
    "\12\3\3\0\3\3\6\0\1\3\1\142\14\3\2\0"+
    "\12\3\3\0\3\3\6\0\5\3\1\143\5\3\1\144"+
    "\2\3\2\0\12\3\3\0\3\3\6\0\7\3\1\145"+
    "\6\3\2\0\12\3\3\0\3\3\6\0\1\3\1\146"+
    "\14\3\2\0\12\3\3\0\3\3\6\0\5\3\1\147"+
    "\10\3\2\0\12\3\3\0\3\3\6\0\2\3\1\150"+
    "\13\3\2\0\12\3\3\0\3\3\6\0\13\3\1\151"+
    "\2\3\2\0\12\3\3\0\3\3\6\0\4\3\1\152"+
    "\11\3\2\0\12\3\3\0\3\3\6\0\5\3\1\153"+
    "\10\3\2\0\12\3\3\0\3\3\6\0\11\3\1\154"+
    "\4\3\2\0\12\3\3\0\3\3\6\0\3\3\1\155"+
    "\5\3\1\156\4\3\2\0\12\3\3\0\3\3\6\0"+
    "\4\3\1\157\11\3\2\0\3\3\1\160\6\3\3\0"+
    "\3\3\6\0\14\3\1\161\1\3\2\0\7\3\1\162"+
    "\2\3\3\0\3\3\6\0\5\3\1\163\10\3\2\0"+
    "\12\3\3\0\3\3\6\0\13\3\1\164\2\3\2\0"+
    "\12\3\3\0\3\3\6\0\13\3\1\165\2\3\2\0"+
    "\12\3\3\0\3\3\6\0\11\3\1\166\1\167\3\3"+
    "\2\0\12\3\3\0\3\3\6\0\16\3\2\0\4\3"+
    "\1\170\5\3\3\0\3\3\6\0\3\3\1\171\12\3"+
    "\2\0\12\3\3\0\3\3\6\0\16\3\2\0\1\172"+
    "\11\3\3\0\3\3\6\0\13\3\1\173\2\3\2\0"+
    "\12\3\3\0\3\3\6\0\11\3\1\174\1\3\1\175"+
    "\2\3\2\0\12\3\3\0\3\3\6\0\4\3\1\176"+
    "\11\3\2\0\12\3\3\0\3\3\6\0\3\3\1\177"+
    "\12\3\2\0\1\200\11\3\3\0\3\3\6\0\3\3"+
    "\1\201\12\3\2\0\12\3\3\0\3\3\6\0\16\3"+
    "\2\0\1\202\11\3\3\0\3\3\6\0\4\3\1\203"+
    "\11\3\2\0\12\3\3\0\3\3\6\0\1\204\15\3"+
    "\2\0\12\3\3\0\3\3\6\0\1\3\1\205\14\3"+
    "\2\0\12\3\3\0\3\3\6\0\11\3\1\206\4\3"+
    "\2\0\12\3\3\0\3\3\6\0\1\3\1\207\14\3"+
    "\2\0\12\3\3\0\3\3\6\0\1\3\1\210\14\3"+
    "\2\0\12\3\3\0\3\3\6\0\11\3\1\211\4\3"+
    "\2\0\12\3\3\0\3\3\6\0\1\3\1\212\14\3"+
    "\2\0\12\3\3\0\3\3\6\0\11\3\1\213\4\3"+
    "\2\0\12\3\3\0\3\3\6\0\6\3\1\214\7\3"+
    "\2\0\12\3\3\0\3\3\6\0\1\3\1\215\14\3"+
    "\2\0\12\3\3\0\3\3\6\0\5\3\1\216\10\3"+
    "\2\0\12\3\3\0\3\3\6\0\16\3\2\0\1\217"+
    "\11\3\3\0\3\3\6\0\1\3\1\220\14\3\2\0"+
    "\12\3\3\0\3\3\6\0\16\3\2\0\4\3\1\221"+
    "\5\3\3\0\3\3\6\0\13\3\1\222\2\3\2\0"+
    "\12\3\3\0\3\3\6\0\4\3\1\223\11\3\2\0"+
    "\12\3\3\0\3\3\6\0\3\3\1\224\12\3\2\0"+
    "\12\3\3\0\3\3\6\0\16\3\2\0\10\3\1\225"+
    "\1\3\3\0\3\3\6\0\11\3\1\226\4\3\2\0"+
    "\12\3\3\0\3\3\6\0\16\3\2\0\3\3\1\227"+
    "\6\3\3\0\3\3\6\0\11\3\1\230\4\3\2\0"+
    "\12\3\3\0\3\3\6\0\14\3\1\231\1\3\2\0"+
    "\12\3\3\0\3\3\6\0\1\3\1\232\14\3\2\0"+
    "\12\3\3\0\3\3\6\0\16\3\2\0\3\3\1\233"+
    "\6\3\3\0\3\3\6\0\16\3\2\0\1\234\11\3"+
    "\3\0\3\3\6\0\13\3\1\235\2\3\2\0\12\3"+
    "\3\0\3\3\6\0\16\3\2\0\4\3\1\236\5\3"+
    "\3\0\3\3\6\0\3\3\1\237\12\3\2\0\12\3"+
    "\3\0\3\3\6\0\2\3\1\240\13\3\2\0\12\3"+
    "\3\0\3\3\6\0\1\3\1\241\14\3\2\0\12\3"+
    "\3\0\3\3\6\0\4\3\1\242\11\3\2\0\12\3"+
    "\3\0\3\3\6\0\3\3\1\243\12\3\2\0\12\3"+
    "\3\0\3\3\6\0\11\3\1\244\4\3\2\0\12\3"+
    "\3\0\3\3\6\0\1\3\1\245\14\3\2\0\12\3"+
    "\3\0\3\3\6\0\16\3\2\0\3\3\1\246\6\3"+
    "\3\0\3\3\6\0\7\3\1\247\6\3\2\0\12\3"+
    "\3\0\3\3\6\0\5\3\1\250\10\3\2\0\12\3"+
    "\3\0\3\3\6\0\13\3\1\251\2\3\2\0\12\3"+
    "\3\0\3\3\6\0\2\3\1\252\13\3\2\0\12\3"+
    "\3\0\3\3\6\0\16\3\2\0\3\3\1\253\6\3"+
    "\3\0\3\3\6\0\16\3\2\0\2\3\1\254\7\3"+
    "\3\0\3\3\6\0\3\3\1\255\12\3\2\0\12\3"+
    "\3\0\3\3\6\0\13\3\1\256\2\3\2\0\12\3"+
    "\3\0\3\3\6\0\3\3\1\257\12\3\2\0\12\3"+
    "\3\0\3\3\6\0\16\3\2\0\1\260\11\3\3\0"+
    "\3\3\6\0\15\3\1\261\2\0\12\3\3\0\3\3"+
    "\6\0\4\3\1\262\11\3\2\0\12\3\3\0\3\3"+
    "\6\0\13\3\1\263\2\3\2\0\12\3\3\0\3\3"+
    "\6\0\16\3\2\0\1\264\11\3\3\0\3\3\6\0"+
    "\6\3\1\265\7\3\2\0\12\3\3\0\3\3\6\0"+
    "\11\3\1\266\4\3\2\0\12\3\3\0\3\3\6\0"+
    "\16\3\2\0\1\3\1\267\10\3\3\0\3\3\6\0"+
    "\16\3\2\0\2\3\1\270\7\3\3\0\3\3\6\0"+
    "\4\3\1\271\11\3\2\0\12\3\3\0\3\3\6\0"+
    "\16\3\2\0\1\272\11\3\3\0\3\3\6\0\16\3"+
    "\2\0\3\3\1\273\6\3\3\0\3\3\6\0\1\3"+
    "\1\274\14\3\2\0\12\3\3\0\3\3\6\0\16\3"+
    "\2\0\3\3\1\275\6\3\3\0\3\3\6\0\13\3"+
    "\1\276\2\3\2\0\12\3\3\0\3\3\6\0\16\3"+
    "\2\0\5\3\1\277\4\3\3\0\3\3\6\0\2\3"+
    "\1\300\13\3\2\0\12\3\3\0\3\3\6\0\3\3"+
    "\1\301\12\3\2\0\12\3\3\0\3\3\6\0\1\3"+
    "\1\302\14\3\2\0\12\3\3\0\3\3\6\0\2\3"+
    "\1\303\13\3\2\0\12\3\3\0\3\3\6\0\1\304"+
    "\15\3\2\0\12\3\3\0\3\3\6\0\13\3\1\305"+
    "\2\3\2\0\12\3\3\0\3\3\6\0\1\3\1\306"+
    "\14\3\2\0\12\3\3\0\3\3\6\0\5\3\1\307"+
    "\10\3\2\0\12\3\3\0\3\3\6\0\3\3\1\310"+
    "\12\3\2\0\12\3\3\0\3\3\6\0\1\311\15\3"+
    "\2\0\12\3\3\0\3\3\6\0\1\3\1\312\14\3"+
    "\2\0\12\3\3\0\3\3\6\0\3\3\1\313\12\3"+
    "\2\0\12\3\3\0\3\3\6\0\16\3\2\0\4\3"+
    "\1\314\5\3\3\0\3\3\6\0\11\3\1\315\4\3"+
    "\2\0\12\3\3\0\3\3\6\0\14\3\1\316\1\3"+
    "\2\0\12\3\3\0\3\3\6\0\14\3\1\317\1\3"+
    "\2\0\12\3\3\0\3\3\6\0\3\3\1\320\12\3"+
    "\2\0\12\3\3\0\3\3\6\0\16\3\2\0\4\3"+
    "\1\321\5\3\3\0\3\3\6\0\2\3\1\322\13\3"+
    "\2\0\12\3\3\0\3\3\6\0\1\3\1\323\14\3"+
    "\2\0\12\3\3\0\3\3\6\0\2\3\1\324\13\3"+
    "\2\0\12\3\3\0\3\3\6\0\1\325\15\3\2\0"+
    "\12\3\3\0\3\3\6\0\6\3\1\326\7\3\2\0"+
    "\12\3\3\0\3\3\6\0\3\3\1\327\12\3\2\0"+
    "\12\3\3\0\3\3\6\0\16\3\2\0\3\3\1\330"+
    "\6\3\3\0\3\3\6\0\1\3\1\331\14\3\2\0"+
    "\12\3\3\0\3\3\6\0\2\3\1\332\13\3\2\0"+
    "\12\3\3\0\3\3\6\0\3\3\1\333\12\3\2\0"+
    "\12\3\3\0\3\3\6\0\3\3\1\334\12\3\2\0"+
    "\12\3\3\0\3\3\6\0\1\335\15\3\2\0\12\3"+
    "\3\0\3\3\6\0\3\3\1\336\12\3\2\0\12\3"+
    "\3\0\3\3\6\0\1\337\15\3\2\0\12\3\3\0"+
    "\3\3\6\0\16\3\2\0\2\3\1\340\7\3\3\0"+
    "\3\3\6\0\1\3\1\341\14\3\2\0\12\3\3\0"+
    "\3\3\6\0\3\3\1\342\12\3\2\0\12\3\3\0"+
    "\3\3\6\0\1\343\15\3\2\0\12\3\3\0\3\3"+
    "\6\0\16\3\2\0\2\3\1\344\7\3\3\0\3\3"+
    "\6\0\12\3\1\345\3\3\2\0\12\3\3\0\3\3"+
    "\6\0\15\3\1\346\2\0\12\3\3\0\3\3\6\0"+
    "\1\3\1\347\14\3\2\0\12\3\3\0\3\3\6\0"+
    "\11\3\1\350\4\3\2\0\12\3\3\0\3\3\6\0"+
    "\1\3\1\351\14\3\2\0\12\3\3\0\3\3\6\0"+
    "\2\3\1\352\13\3\2\0\12\3\3\0\3\3\6\0"+
    "\13\3\1\353\2\3\2\0\12\3\3\0\3\3\6\0"+
    "\16\3\2\0\3\3\1\354\6\3\3\0\3\3\6\0"+
    "\16\3\2\0\4\3\1\355\5\3\3\0\3\3\6\0"+
    "\16\3\2\0\11\3\1\356\3\0\3\3\6\0\13\3"+
    "\1\357\2\3\2\0\12\3\3\0\3\3\6\0\16\3"+
    "\2\0\3\3\1\360\6\3\3\0\3\3\6\0\4\3"+
    "\1\361\11\3\2\0\12\3\3\0\3\3\6\0\3\3"+
    "\1\362\12\3\2\0\12\3\3\0\3\3\6\0\12\3"+
    "\1\363\3\3\2\0\12\3\3\0\3\3\6\0\1\3"+
    "\1\364\14\3\2\0\12\3\3\0\3\3\6\0\5\3"+
    "\1\365\10\3\2\0\12\3\3\0\3\3\6\0\3\3"+
    "\1\366\12\3\2\0\12\3\3\0\3\3\6\0\1\3"+
    "\1\367\14\3\2\0\12\3\3\0\3\3\6\0\3\3"+
    "\1\370\12\3\2\0\12\3\3\0\3\3\6\0\1\3"+
    "\1\371\14\3\2\0\12\3\3\0\3\3\6\0\11\3"+
    "\1\372\4\3\2\0\12\3\3\0\3\3\6\0\11\3"+
    "\1\373\4\3\2\0\12\3\3\0\3\3\6\0\1\3"+
    "\1\374\14\3\2\0\12\3\3\0\3\3\6\0\6\3"+
    "\1\375\7\3\2\0\12\3\3\0\3\3\6\0\3\3"+
    "\1\376\12\3\2\0\12\3\3\0\3\3\6\0\1\377"+
    "\15\3\2\0\12\3\3\0\3\3\6\0\1\3\1\u0100"+
    "\14\3\2\0\12\3\3\0\3\3\6\0\4\3\1\u0101"+
    "\11\3\2\0\12\3\3\0\3\3\6\0\4\3\1\u0102"+
    "\11\3\2\0\12\3\3\0\3\3\6\0\1\3\1\u0103"+
    "\14\3\2\0\12\3\3\0\3\3\6\0\16\3\2\0"+
    "\2\3\1\u0104\7\3\3\0\3\3\6\0\1\3\1\u0105"+
    "\14\3\2\0\12\3\3\0\3\3\6\0\4\3\1\u0106"+
    "\11\3\2\0\12\3\3\0\3\3\6\0\1\3\1\u0107"+
    "\14\3\2\0\12\3\3\0\3\3\6\0\16\3\2\0"+
    "\2\3\1\u0108\7\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7714];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\2\1\1\11\24\1\2\0"+
    "\50\1\1\0\1\11\276\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
/*-*
* funciones y variables
*/
private void imprimir(String descripcion, String lexema) {
    System.out.println(lexema + " - " + descripcion);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if (!yytext().matches("\\s")) {
        throw new RuntimeException("Caracter inválido \"" + yytext() +
        "\" en la línea " + yyline + ", columna " + yycolumn);
    }
            }
          case 66: break;
          case 2: 
            { imprimir("Identificador", yytext());
            }
          case 67: break;
          case 3: 
            { imprimir("Número entero", yytext());
            }
          case 68: break;
          case 4: 
            { imprimir("Signo", yytext());
            }
          case 69: break;
          case 5: 
            { imprimir("Operadores matemáticos", yytext());
            }
          case 70: break;
          case 6: 
            { imprimir("Símbolo", yytext());
            }
          case 71: break;
          case 7: 
            { /* Ignorar espacio en blanco */
            }
          case 72: break;
          case 8: 
            { /* Ignorar espacios */
            }
          case 73: break;
          case 9: 
            { imprimir("Instrucción if", yytext());
            }
          case 74: break;
          case 10: 
            { imprimir("Instrucción do", yytext());
            }
          case 75: break;
          case 11: 
            { imprimir("Cadena", yytext());
            }
          case 76: break;
          case 12: 
            { imprimir("Número de punto flotante", yytext());
            }
          case 77: break;
          case 13: 
            { imprimir("Entrada estándar cin", yytext());
            }
          case 78: break;
          case 14: 
            { imprimir("Operador new", yytext());
            }
          case 79: break;
          case 15: 
            { imprimir("Palabra clave try", yytext());
            }
          case 80: break;
          case 16: 
            { imprimir("Instrucción for", yytext());
            }
          case 81: break;
          case 17: 
            { imprimir("Tipo de dato int", yytext());
            }
          case 82: break;
          case 18: 
            { imprimir("Salida estándar cout", yytext());
            }
          case 83: break;
          case 19: 
            { imprimir("Tipo de dato char", yytext());
            }
          case 84: break;
          case 20: 
            { imprimir("Instrucción case", yytext());
            }
          case 85: break;
          case 21: 
            { imprimir("Fin de línea endl", yytext());
            }
          case 86: break;
          case 22: 
            { imprimir("Instrucción else", yytext());
            }
          case 87: break;
          case 23: 
            { imprimir("Valor booleano true", yytext());
            }
          case 88: break;
          case 24: 
            { imprimir("Puntero 'this'", yytext());
            }
          case 89: break;
          case 25: 
            { imprimir("Tipo de dato bool", yytext());
            }
          case 90: break;
          case 26: 
            { imprimir("Tipo de dato long", yytext());
            }
          case 91: break;
          case 27: 
            { imprimir("Palabra clave auto", yytext());
            }
          case 92: break;
          case 28: 
            { imprimir("Tipo de dato void", yytext());
            }
          case 93: break;
          case 29: 
            { imprimir("Palabra clave const", yytext());
            }
          case 94: break;
          case 30: 
            { imprimir("Palabra clave class", yytext());
            }
          case 95: break;
          case 31: 
            { imprimir("Palabra clave catch", yytext());
            }
          case 96: break;
          case 32: 
            { imprimir("Palabra clave throw", yytext());
            }
          case 97: break;
          case 33: 
            { imprimir("Instrucción break", yytext());
            }
          case 98: break;
          case 34: 
            { imprimir("Tipo de dato float", yytext());
            }
          case 99: break;
          case 35: 
            { imprimir("Valor booleano false", yytext());
            }
          case 100: break;
          case 36: 
            { imprimir("Tipo de dato short", yytext());
            }
          case 101: break;
          case 37: 
            { imprimir("Instrucción while", yytext());
            }
          case 102: break;
          case 38: 
            { imprimir("Palabra clave using", yytext());
            }
          case 103: break;
          case 39: 
            { imprimir("Palabra clave extern", yytext());
            }
          case 104: break;
          case 40: 
            { imprimir("Instrucción return", yytext());
            }
          case 105: break;
          case 41: 
            { imprimir("Palabra clave public", yytext());
            }
          case 106: break;
          case 42: 
            { imprimir("Palabra clave friend", yytext());
            }
          case 107: break;
          case 43: 
            { imprimir("Palabra clave inline", yytext());
            }
          case 108: break;
          case 44: 
            { imprimir("Palabra clave struct", yytext());
            }
          case 109: break;
          case 45: 
            { imprimir("Palabra clave static", yytext());
            }
          case 110: break;
          case 46: 
            { imprimir("Tipo de dato signed", yytext());
            }
          case 111: break;
          case 47: 
            { imprimir("Operador sizeof", yytext());
            }
          case 112: break;
          case 48: 
            { imprimir("Instrucción switch", yytext());
            }
          case 113: break;
          case 49: 
            { imprimir("Operador delete", yytext());
            }
          case 114: break;
          case 50: 
            { imprimir("Tipo de dato double", yytext());
            }
          case 115: break;
          case 51: 
            { imprimir("Puntero nulo nullptr", yytext());
            }
          case 116: break;
          case 52: 
            { imprimir("Palabra clave typedef", yytext());
            }
          case 117: break;
          case 53: 
            { imprimir("Palabra clave private", yytext());
            }
          case 118: break;
          case 54: 
            { imprimir("Instrucción default", yytext());
            }
          case 119: break;
          case 55: 
            { imprimir("Palabra clave virtual", yytext());
            }
          case 120: break;
          case 56: 
            { imprimir("Instrucción continue", yytext());
            }
          case 121: break;
          case 57: 
            { imprimir("Palabra clave explicit", yytext());
            }
          case 122: break;
          case 58: 
            { imprimir("Palabra clave template", yytext());
            }
          case 123: break;
          case 59: 
            { imprimir("Palabra clave register", yytext());
            }
          case 124: break;
          case 60: 
            { imprimir("Palabra clave operator", yytext());
            }
          case 125: break;
          case 61: 
            { imprimir("Tipo de dato unsigned", yytext());
            }
          case 126: break;
          case 62: 
            { imprimir("Palabra clave volatile", yytext());
            }
          case 127: break;
          case 63: 
            { imprimir("Palabra clave constexpr", yytext());
            }
          case 128: break;
          case 64: 
            { imprimir("Palabra clave namespace", yytext());
            }
          case 129: break;
          case 65: 
            { imprimir("Palabra clave protected", yytext());
            }
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
